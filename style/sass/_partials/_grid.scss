/**
* The grid system for the n-styles framework
* @author Nusa Babic
* @version 1.0.0
* @since March 2016
*/

$tablet-width: 768px;
$desktop-width: 1024px;

@mixin mobileOnly {
  @media (max-width: #{$tablet-width}) {
    @content;
  }
}

@mixin tabletUp {
  @media (min-width: #{$tablet-width}) {
    @content;
  }
}

@mixin makeGrid($num, $padding: 2%, $margin: 2%) {
	@for $i from 1 through $num {
		@include tabletUp {
			.has-#{$i} {
			
				> * {
					float: left;
					
					&:not([class^="is-"]) {
						width: 100%;
					}
					
				}
				width: 100%;
				display: block;
			}
			.is-#{$i} {
				&.standalone {
					$factor: $num / $i;
					@include isMarginContainer($factor, $margin);
				}
				&:not(.standalone) {
					$factor: $i / $num;
					@include isContainer($factor);
				}
			}
			@if $i < $num {
				.offset-#{$i} {
					margin-left: calcGridColumnWidth($num, $i);
				}
			}
		}

		
	}
	@include mobileOnly {
		$fontsize: 16px;
		[class^='has-'], [class*=' has-'],
			[class^='is-'], [class*=' is-'] {
				width: 100% !important;
		}
		main, .main-footer {
			padding: 2*$fontsize;
		}
		.block-group .block {
			padding: 0 0;
		}
		
	}
	@for $i from 1 through 4 {
		.break-before-#{$i} {
			margin-top: $i * 1em;
		}

		.break-after-#{$i} {
			margin-bottom: $i * 1em;
		}
	}
}

@mixin isMarginContainer($i, $margin) {
	
	// total width of container, minus margins
	$total: 100% - (($i - 1) * $margin);
	margin-right: $margin;
	width: $total / $i;
	&:last-child {
		margin-right: 0;
	}
}
@mixin isContainer($i) {
	width: 100 * $i * 1%;
}
@function calcGridColumnWidth($num, $i) {
	@return (100 / $num) *$i * 1%;
}
